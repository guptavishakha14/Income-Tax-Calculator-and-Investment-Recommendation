import { TextField, InputAdornment } from '@mui/material';
import React, { useMemo } from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded = ["value", "precision", "thousandChar", "decimalChar", "prefix", "suffix"];

function verifyNumber(string) {
  var numericRepresentation = string.replace(/[,.]/g, '');
  return {
    isNumber: !isNaN(Number(numericRepresentation)),
    numberFormat: !isNaN(Number(numericRepresentation)) ? Number(numericRepresentation) : null
  };
}

function NumericInput(props) {
  var value = props.value,
      precision = props.precision,
      thousandChar = props.thousandChar,
      decimalChar = props.decimalChar,
      prefix = props.prefix,
      suffix = props.suffix,
      inputProps = _objectWithoutPropertiesLoose(props, _excluded);

  var defaultValue = value === null ? NaN : Number(value);
  var formatter = useMemo(function () {
    return new Intl.NumberFormat('pt-BR', {
      minimumFractionDigits: precision,
      maximumFractionDigits: precision
    });
  }, [thousandChar, decimalChar]);

  if (!decimalChar) {
    throw new Error('Decimal char should not be an empty string!');
  }

  if (!thousandChar) {
    throw new Error('Thousand char should not be an empty string!');
  }

  function format(number) {
    var result = formatter.format(number).replace(',', decimalChar).replaceAll('.', thousandChar);
    return result;
  }

  function handleKeyDown(e) {
    if (e.key === ' ') e.preventDefault();
    if (e.ctrlKey || e.shiftKey || e.key === 'Backspace' || e.key === 'Enter' || e.key === 'Tab') return;
    if (!verifyNumber(e.key).isNumber) e.preventDefault();
  }

  function handleChange(e) {
    var newEvent = _extends({}, e, {
      currentTarget: _extends({}, e.currentTarget, {
        name: props.name,
        value: 0
      }),
      target: _extends({}, e.target, {
        name: props.name,
        value: 0
      })
    });

    var numericRepresentation = e.target.value;
    numericRepresentation = numericRepresentation.replaceAll(thousandChar, '');
    numericRepresentation = numericRepresentation.replace(decimalChar, '');

    if (numericRepresentation === '') {
      e.target.value = '';
      newEvent.target.value = null;
      newEvent.currentTarget.value = null;
      return props.onChange && props.onChange(newEvent);
    }

    var _verifyNumber = verifyNumber(numericRepresentation),
        isNumber = _verifyNumber.isNumber,
        numberFormat = _verifyNumber.numberFormat;

    if (isNumber && numberFormat !== null) {
      var withPrecision = numberFormat / Math.pow(10, precision);
      var formattedNumber = format(withPrecision);
      newEvent.target.value = withPrecision;
      newEvent.currentTarget.value = withPrecision;
      e.target.value = formattedNumber;
      props.onChange && props.onChange(newEvent);
    }
  }

  var hasValue = value !== undefined;
  var inputDefaultValue;
  var inputValue;

  if (hasValue) {
    if (isNaN(defaultValue) || value === '') {
      inputValue = null;
    } else {
      inputValue = format(defaultValue);
    }
  }

  if (!hasValue && !isNaN(defaultValue)) {
    inputDefaultValue = format(defaultValue);
  }

  return React.createElement(TextField, Object.assign({
    defaultValue: inputDefaultValue
  }, inputProps, {
    onKeyDown: handleKeyDown,
    onChange: handleChange,
    value: inputValue,
    InputProps: {
      startAdornment: prefix && React.createElement(InputAdornment, {
        position: 'start'
      }, prefix),
      endAdornment: suffix && React.createElement(InputAdornment, {
        position: 'end'
      }, suffix)
    }
  }));
}

export default NumericInput;
//# sourceMappingURL=index.modern.js.map
